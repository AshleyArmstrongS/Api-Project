type Query {
  info:             String!
  herd:             [Animal!]!
  animal(id: ID!):  Animal!
  farmer:  Farmer!
}
type Animal {
  id:             ID!
  tag_number:     Int!
  herd_number:    String!
  sire_number:    Int!
  mother_number:  Int!
  male_female:    MF!
  breed_type:     String!
  pure_breed:     Boolean!
  animal_name:    String!
  description:    String!
  farmer_id:      Int!
}
type AuthPayload {
  token: String!
  farmer: Farmer!
}

type Farmer {
  id:           ID!
  first_name:   String!
  second_name:  String!
  farm_type:    FT!
  farm_address: String!
  password:     String!
  email:        String!
  herd_number:  String!
}

type Mutation {
  createAnimal(
    tag_number:     Int!,
    herd_number:    String!,
    sire_number:    Int!,
    mother_number:  Int!,
    male_female:    MF!,
    breed_type:     String!,
    pure_breed:     Boolean!,
    animal_name:    String!,
    description:    String!,
    farmer_id:      Int!,
  ) : Animal

  signup(
    email: String!,
    password: String!,
    first_name: String!,
    second_name: String!,
    farm_type: FT!,
    farm_address: String!,
    password: String!,
    email: String!
    herd_number: String!
    ): AuthPayload

  login(email: String!, password: String!): AuthPayload
}

enum MF {
  M
  F
}

enum FT {
  Dairy
  Beef
  Sucker
  Other
}